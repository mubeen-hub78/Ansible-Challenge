---
# playbook.yml - Complete Ansible Playbook for Ansible Challenge

# Play 1: Ensure Python 3.8 is available for Ansible on RedHat-like systems (e.g., Amazon Linux 2)
# This play must run FIRST for 'redhat_hosts'.
- name: Ensure Python 3.8 is available for Ansible on RedHat-like systems
  hosts: redhat_hosts
  become: true # Needed for package installation and system-wide symlinks
  gather_facts: false # Essential: do not gather facts before Python interpreter is properly set up
  tasks:
    - name: Install Python 3.8 and set as default on RedHat (c8.local)
      raw: |
        echo "Starting Python 3.8 installation on RedHat-like system (Amazon Linux 2 specific)..."
        # Check if python3.8 exists and if its minor version is less than 8
        if ! command -v python3.8 &> /dev/null || [ "$(python3.8 -c 'import sys; print(sys.version_info[1])' 2>/dev/null || echo 0)" -lt 8 ]; then
          echo "Python 3.8 not found or too old, installing via amazon-linux-extras..."
          # Update system first (optional, but good practice)
          sudo yum update -y || echo "Yum update failed, but continuing for Python install."
          # Install Python 3.8 via amazon-linux-extras
          sudo amazon-linux-extras install -y python3.8
          echo "amazon-linux-extras install output: $?"
        else
          echo "Python 3.8 already present and sufficient."
        fi

        # Verify existence and path of python3.8 after install attempt
        echo "Verifying python3.8 path:"
        which python3.8 || echo "python3.8 not in PATH after install"
        ls -l /usr/bin/python3.8 || echo "/usr/bin/python3.8 does not exist after install"

        # Attempt to ensure /usr/bin/python is a symlink to python3.8 using alternatives and direct symlink
        if [ -f /usr/bin/python3.8 ]; then
            echo "Attempting to set /usr/bin/python to python3.8 via alternatives and symlink..."
            # --force is crucial to overwrite existing alternatives entry (e.g., pointing to python2)
            sudo alternatives --install /usr/bin/python python /usr/bin/python3.8 100 --force
            echo "alternatives --install output: $?"
            # Create a direct symlink for robustness, in case alternatives is not immediately picked up by shell/Ansible.
            sudo ln -sf /usr/bin/python3.8 /usr/bin/python
            echo "ln -sf output: $?"
            echo "Python 3.8 found at /usr/bin/python3.8 and linked to /usr/bin/python."
        else
            echo "ERROR: /usr/bin/python3.8 was not found after installation attempt. This is critical. Exiting raw task with error."
            exit 1 # Force an error if Python 3.8 was not installed correctly
        fi

        echo "Current /usr/bin/python symlink:"
        ls -l /usr/bin/python || echo "/usr/bin/python does not exist after symlink attempt"
        echo "Attempting to run python3.8 --version:"
        /usr/bin/python3.8 --version || echo "/usr/bin/python3.8 command failed after setup"
        echo "Attempting to run python --version:"
        python --version || echo "python command failed after setup"
      register: python_install_result
      # Fail if the raw command itself returned a non-zero exit code, or if python3.8 verification failed.
      failed_when: "python_install_result.rc != 0 or 'ERROR: /usr/bin/python3.8 was not found' in python_install_result.stdout"

    - name: Debug RedHat Python install output
      debug:
        var: python_install_result.stdout_lines
      when: python_install_result is defined # Only show debug if the raw task was attempted


# Play 2: Ensure Python 3.8 is available for Ansible on Debian-like systems (e.g., Ubuntu 24.04)
# This play must run SECOND for 'debian_hosts'.
- name: Ensure Python 3.8 is available for Ansible on Debian-like systems
  hosts: debian_hosts
  become: true # Needed for package installation and system-wide symlinks
  gather_facts: false # Essential: do not gather facts before Python interpreter is properly set up
  tasks:
    - name: Install Python 3.8 and set as default on Debian (u21.local)
      raw: |
        echo "Starting Python 3.8 installation on Debian-like system (Ubuntu 24.04 specific)..."
        # Check if python3.8 exists and if its minor version is less than 8
        if ! command -v python3.8 &> /dev/null || [ "$(python3.8 -c 'import sys; print(sys.version_info[1])' 2>/dev/null || echo 0)" -lt 8 ]; then
          echo "Python 3.8 not found or too old, adding deadsnakes PPA and installing..."
          sudo apt update -y
          sudo apt install -y software-properties-common # Needed for add-apt-repository
          sudo add-apt-repository -y ppa:deadsnakes/ppa # Add PPA for older Python versions like 3.8
          sudo apt update -y # Update apt cache after adding PPA
          sudo apt install -y python3.8 python3.8-venv python3-pip
          echo "apt install output: $?"
        else
          echo "Python 3.8 already present and sufficient."
        fi

        # Verify existence and path of python3.8 after install attempt
        echo "Verifying python3.8 path:"
        which python3.8 || echo "python3.8 not in PATH after install"
        ls -l /usr/bin/python3.8 || echo "/usr/bin/python3.8 does not exist after install"

        # Attempt to ensure /usr/bin/python is a symlink to python3.8 via update-alternatives and direct symlink
        if [ -f /usr/bin/python3.8 ]; then
            echo "Attempting to set /usr/bin/python to python3.8 via update-alternatives and symlink..."
            # --force is crucial to overwrite existing alternatives entry
            sudo update-alternatives --install /usr/bin/python python /usr/bin/python3.8 100 --force
            echo "update-alternatives --install output: $?"
            # Create a direct symlink for robustness, in case alternatives is not immediately picked up by shell/Ansible.
            sudo ln -sf /usr/bin/python3.8 /usr/bin/python
            echo "ln -sf output: $?"
            echo "Python 3.8 found at /usr/bin/python3.8 and linked to /usr/bin/python."
        else
            echo "ERROR: /usr/bin/python3.8 was not found after installation attempt. This is critical. Exiting raw task with error."
            exit 1 # Force an error if Python 3.8 was not installed correctly
        fi

        echo "Current /usr/bin/python symlink:"
        ls -l /usr/bin/python || echo "/usr/bin/python does not exist after symlink attempt"
        echo "Attempting to run python3.8 --version:"
        /usr/bin/python3.8 --version || echo "/usr/bin/python3.8 command failed after setup"
        echo "Attempting to run python --version:"
        python --version || echo "python command failed after setup"
      register: python_install_result
      # Fail if the raw command itself returned a non-zero exit code, or if python3.8 verification failed.
      failed_when: "python_install_result.rc != 0 or 'ERROR: /usr/bin/python3.8 was not found' in python_install_result.stdout"

    - name: Debug Debian Python install output
      debug:
        var: python_install_result.stdout_lines
      when: python_install_result is defined # Only show debug if the raw task was attempted


# Play 3: Common OS Configuration
# This play and subsequent ones will run AFTER Python is ensured on both systems.
- name: Common OS Configuration
  hosts: all
  become: true
  vars:
    ansible_python_interpreter: /usr/bin/python3.8 # Now this path should be valid for Ansible
  roles:
    - common # Assuming you have a 'common' role in roles/common


# Play 4: Configure Frontend Servers (Nginx)
- name: Configure Frontend
  hosts: frontend
  become: true
  vars:
    ansible_python_interpreter: /usr/bin/python3.8 # Ensure the correct interpreter is used
  roles:
    - frontend # Assuming you have a 'frontend' role in roles/frontend


# Play 5: Configure Backend Servers (Netdata)
- name: Configure Backend
  hosts: backend
  become: true
  vars:
    ansible_python_interpreter: /usr/bin/python3.8 # Ensure the correct interpreter is used
  roles:
    - backend # Assuming you have a 'backend' role in roles/backend
```
