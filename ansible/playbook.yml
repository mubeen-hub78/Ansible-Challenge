---
# playbook.yml - Optimized Ansible Playbook

# Play 1: Ensure Python 3.8 is available for Ansible on RedHat-like systems (e.g., Amazon Linux 2)
# This play must run FIRST and ONLY targets 'redhat_hosts' because its default Python 3 is too old.
- name: Ensure Python 3.8 is available for Ansible on RedHat-like systems
  hosts: redhat_hosts
  become: true # Needed for package installation and system-wide symlinks
  gather_facts: false # Essential: do not gather facts before Python interpreter is properly set up
  tasks:
    - name: Install Python 3.8 on RedHat (c8.local) if needed
      # Use raw module because Python 3.8 might not be the default interpreter yet,
      # and the initial connection might use Python 2.7
      raw: |
        echo "Checking Python 3.8 on RedHat-like system (Amazon Linux 2 specific)..."
        # Check if python3.8 exists and if its minor version is less than 8
        if ! command -v /usr/bin/python3.8 &> /dev/null || [ "$(/usr/bin/python3.8 -c 'import sys; print(sys.version_info[1])' 2>/dev/null || echo 0)" -lt 8 ]; then
          echo "Python 3.8 not found or too old, installing via amazon-linux-extras..."
          sudo yum update -y || echo "Yum update failed, but continuing for Python install."
          sudo amazon-linux-extras install -y python3.8
          echo "amazon-linux-extras install output: $?"
        else
          echo "Python 3.8 already present and sufficient."
        fi

        echo "Verifying /usr/bin/python3.8 path:"
        if [ -f /usr/bin/python3.8 ]; then
            echo "/usr/bin/python3.8 exists. All good."
        else
            echo "ERROR: /usr/bin/python3.8 was not found after installation attempt. This is critical. Exiting raw task with error."
            exit 1 # Force an error if Python 3.8 was not installed correctly
        fi
      register: python_install_result
      failed_when: "python_install_result.rc != 0 or 'ERROR: /usr/bin/python3.8 was not found' in python_install_result.stdout"

    - name: Debug RedHat Python install output
      debug:
        var: python_install_result.stdout_lines
      when: python_install_result is defined


# The "Ensure Python 3.8 on Debian-like systems" play is removed entirely.
# /usr/bin/python3 on Ubuntu 24.04 (Python 3.12) is sufficient and is set in outputs.tf.


# Play 2: Common OS Configuration
# This play and subsequent ones will run AFTER Python 3.8 is ensured on RedHat hosts
# and Python 3.12 (as /usr/bin/python3) is available on Debian hosts.
- name: Common OS Configuration
  hosts: all
  become: true
  # Explicitly set python interpreter for all hosts to /usr/bin/python3
  # This will use python3.8 on RedHat (after installation) and python3.12 on Debian.
  vars:
    ansible_python_interpreter: /usr/bin/python3
  roles:
    - common # Assuming you have a 'common' role in roles/common


# Play 3: Configure Frontend Servers (Nginx)
- name: Configure Frontend
  hosts: frontend
  become: true
  vars:
    ansible_python_interpreter: /usr/bin/python3 # This will use python3.8 on RedHat
  roles:
    - frontend # Assuming you have a 'frontend' role in roles/frontend


# Play 4: Configure Backend Servers (Netdata)
- name: Configure Backend
  hosts: backend
  become: true
  vars:
    ansible_python_interpreter: /usr/bin/python3 # This will use python3.12 on Debian
  roles:
    - backend # Assuming you have a 'backend' role in roles/backend
